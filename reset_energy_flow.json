[{"id":"203e9339.a0582c","type":"inject","z":"98068bd9.c4b498","name":"every 13:00","topic":"","payload":"","payloadType":"date","repeat":"","crontab":"00 13 * * *","once":false,"onceDelay":0.1,"x":330,"y":180,"wires":[["3e25bd0c.fdce32"]]},{"id":"3e25bd0c.fdce32","type":"function","z":"98068bd9.c4b498","name":"check date","func":"var require = global.get('require');\nvar moment = require('moment');\nconst hass = global.get('homeassistant').homeAssistant;\nconst dateFormat = 'DD/MM/YYYY';\n\nlet now = moment();\n\nvar scheduledDate = moment(hass.states[\"sensor.scheduled_energy_reset\"].state, dateFormat);\nvar nextReading = moment(hass.states[\"sensor.next_power_reading\"].state, dateFormat);\nvar lastReading = moment(hass.states[\"sensor.last_reading_date\"].state, dateFormat);\n\nif (!scheduledDate.isValid() || \n    (now.isSameOrAfter(scheduledDate, \"day\") && lastReading.isSameOrAfter(scheduledDate, \"day\"))) {\n    scheduledDate = nextReading\n}\n\nif (!lastReading.isValid() || lastReading.isBefore(scheduledDate, \"day\")) {\n    if (now.isSameOrAfter(scheduledDate, \"day\")) {\n        node.status({});\n        msg.payload = now.format(dateFormat);\n        return msg;\n    } else {\n        node.status({fill:\"yellow\",shape:\"dot\",text:\"Next: \" + nextReadingStr});\n    }\n} else {\n    node.status({fill:\"yellow\",shape:\"dot\",text:\"Done: \" + lastReadingStr});\n}\nreturn null;","outputs":1,"noerr":0,"x":490,"y":180,"wires":[["1f149a3a.39c116"]]},{"id":"517c366e.f7c2d8","type":"function","z":"98068bd9.c4b498","name":"schedule date","func":"var require = global.get('require');\nvar moment = require('moment');\nconst hass = global.get('homeassistant').homeAssistant;\nconst dateFormat = 'DD/MM/YYYY';\n\nlet now = moment();\n\nvar scheduledDate = moment(hass.states[\"sensor.scheduled_energy_reset\"].state, dateFormat);\nvar nextReading = moment(msg.payload, dateFormat);\nvar lastReading = moment(hass.states[\"sensor.last_reading_date\"].state, dateFormat);\n\nif (!scheduledDate.isValid()) { // scheduledDate is not set\n    scheduledDate = nextReading\n}\n\nlet scheduledMsg = {\n    topic: \"home/power/will_reset_at\"\n}\n\nif (now.isSameOrAfter(scheduledDate, \"day\") && !lastReading.isSame(shceduledDate, \"day\")) {\n    // need to reset the energy meter!\n    scheduledMsg.payload = nextReading.format(dateFormat);\n    return [msg, scheduledMsg]\n}\n\nscheduledMsg.payload = scheduledDate.format(dateFormat);\nreturn [null, scheduledMsg]","outputs":2,"noerr":0,"x":500,"y":220,"wires":[["1f149a3a.39c116"],["45ef3c7c.fcf094"]],"outputLabels":["should reset","scheduled date"]},{"id":"1f149a3a.39c116","type":"change","z":"98068bd9.c4b498","name":"Clear Total Energy","rules":[{"t":"set","p":"payload","pt":"msg","to":"0","tot":"num"},{"t":"set","p":"topic","pt":"msg","to":"powermeter/cmnd/EnergyReset3","tot":"str"}],"action":"","property":"","from":"","to":"","reg":false,"x":710,"y":200,"wires":[["8e54c75f.33eb28","42640114.7cdb9"]]},{"id":"64daf456.00236c","type":"server-state-changed","z":"98068bd9.c4b498","name":"Reading Date Changed","server":"5deef908.183d48","version":1,"entityidfilter":"sensor.next_power_reading","entityidfiltertype":"exact","outputinitially":true,"state_type":"str","haltifstate":"","halt_if_type":"str","halt_if_compare":"is","outputs":1,"output_only_on_state_change":true,"x":300,"y":220,"wires":[["517c366e.f7c2d8"]]},{"id":"45ef3c7c.fcf094","type":"mqtt out","z":"98068bd9.c4b498","name":"Save dates","topic":"","qos":"1","retain":"true","broker":"","x":690,"y":260,"wires":[]},{"id":"8e54c75f.33eb28","type":"mqtt out","z":"98068bd9.c4b498","name":"","topic":"","qos":"","retain":"","broker":"","x":870,"y":220,"wires":[]},{"id":"42640114.7cdb9","type":"debug","z":"98068bd9.c4b498","name":"","active":true,"tosidebar":true,"console":false,"tostatus":false,"complete":"true","targetType":"full","x":835,"y":180,"wires":[],"l":false},{"id":"50de313a.8c44c","type":"function","z":"98068bd9.c4b498","name":"change dates","func":"var require = global.get('require');\nvar moment = require('moment');\nconst hass = global.get('homeassistant').homeAssistant;\nconst dateFormat = 'DD/MM/YYYY';\n\nlet now = moment();\nvar nextReading = moment(hass.states[\"sensor.next_power_reading\"].state, dateFormat);\n\nlet resetedMsg = {}\nresetedMsg.payload = now.format(dateFormat);\nresetedMsg.topic = \"home/power/reseted_at\"\n\nlet scheduledMsg = {}\nscheduledMsg.payload = nextReading.format(dateFormat);\nscheduledMsg.topic = \"home/power/will_reset_at\"\n\nreturn [resetedMsg, scheduledMsg]","outputs":2,"noerr":0,"x":500,"y":280,"wires":[["45ef3c7c.fcf094"],["45ef3c7c.fcf094"]]},{"id":"80212925.b5ff58","type":"mqtt in","z":"98068bd9.c4b498","name":"Energy Reseted","topic":"powermeter/cmnd/EnergyReset3","qos":"2","datatype":"auto","broker":"e1a868b9.a931c8","x":300,"y":280,"wires":[["50de313a.8c44c"]]},{"id":"5deef908.183d48","type":"server","z":"","name":"Home Assistant","legacy":false},{"id":"e1a868b9.a931c8","type":"mqtt-broker","z":"","name":"","broker":"192.168.1.133","port":"1883","clientid":"","usetls":false,"compatmode":true,"keepalive":"60","cleansession":true,"birthTopic":"","birthQos":"0","birthPayload":"","closeTopic":"","closeQos":"0","closePayload":"","willTopic":"","willQos":"0","willPayload":""}]
